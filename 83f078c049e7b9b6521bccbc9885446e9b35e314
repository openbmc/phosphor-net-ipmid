{
  "comments": [
    {
      "key": {
        "uuid": "c414a721_814a209b",
        "filename": "command/rakp12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 200,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2021-01-05T21:12:18Z",
      "side": 1,
      "message": "The first argument would need to be passwd.data(). But it might be good to just make a class which inherits std::string and clears itself upon destruction - then you don\u0027t need to worry about handling every execution/return path.",
      "range": {
        "startLine": 200,
        "startChar": 8,
        "endLine": 200,
        "endChar": 50
      },
      "revId": "83f078c049e7b9b6521bccbc9885446e9b35e314",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3ad8d48_64b70fe6",
        "filename": "command/rakp12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 200,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2021-01-10T17:29:21Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "c414a721_814a209b",
      "range": {
        "startLine": 200,
        "startChar": 8,
        "endLine": 200,
        "endChar": 50
      },
      "revId": "83f078c049e7b9b6521bccbc9885446e9b35e314",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25851c3f_4e7238a7",
        "filename": "command/rakp12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 200,
      "author": {
        "id": 1000416
      },
      "writtenOn": "2021-02-09T10:59:12Z",
      "side": 1,
      "message": "1. Fixed \nOPENSSL_cleanse API need first argument as Address. So passing here only address.\nvoid OPENSSL_cleanse(void *ptr, size_t len);\nBoth the cases it is working. \n\nhttps://manpages.debian.org/testing/libssl-doc/OPENSSL_cleanse.3ssl.en.html\n\n2. Defining class, taking variable and defining object to assign password is going to be complex for existing variable. Since Password is already defined as local variable going with same change.",
      "parentUuid": "d3ad8d48_64b70fe6",
      "range": {
        "startLine": 200,
        "startChar": 8,
        "endLine": 200,
        "endChar": 50
      },
      "revId": "83f078c049e7b9b6521bccbc9885446e9b35e314",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc3804b5_d5d5b273",
        "filename": "command/rakp12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 200,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2021-02-17T02:25:56Z",
      "side": 1,
      "message": "\u003e Both the cases it is working.\n\nDo you mean that passing \u0026passwd was working? It cannot work because the address of the std::string object is not the address of its underlying buffer. Sure, it\u0027ll run but it doesn\u0027t do anything useful and may actually corrupt the stack depending on the password length.\n\n\u003e Defining class, taking variable and defining object to assign password is going to be complex for existing variable\n\nPerhaps when you consider this commit alone. But if your goal is to actually clear all traces of the user password from RAM, then a much more thorough change is needed and you will have replace all uses of std::string with a different secure string class throughout the entire IPMI stack. This change alone removes some copies of the user password but there is no guarantee std::string didn\u0027t leave some data in RAM for a hacker to find.",
      "parentUuid": "25851c3f_4e7238a7",
      "range": {
        "startLine": 200,
        "startChar": 8,
        "endLine": 200,
        "endChar": 50
      },
      "revId": "83f078c049e7b9b6521bccbc9885446e9b35e314",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e75f6ea8_42d2e8ad",
        "filename": "command/rakp12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 200,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2021-02-28T17:53:48Z",
      "side": 1,
      "message": "I also suggest separate class for Password objects.",
      "parentUuid": "cc3804b5_d5d5b273",
      "range": {
        "startLine": 200,
        "startChar": 8,
        "endLine": 200,
        "endChar": 50
      },
      "revId": "83f078c049e7b9b6521bccbc9885446e9b35e314",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "200712f8_2e19c9e1",
        "filename": "command/rakp12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 200,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2021-05-19T14:45:46Z",
      "side": 1,
      "message": "Once https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-host-ipmid/+/42071 is merged, the ipmi::SecureString class will be available to handle passwords. It will be defined in the user_mgmt.hpp file and be available via the user_channel library.",
      "parentUuid": "e75f6ea8_42d2e8ad",
      "range": {
        "startLine": 200,
        "startChar": 8,
        "endLine": 200,
        "endChar": 50
      },
      "revId": "83f078c049e7b9b6521bccbc9885446e9b35e314",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3586a56c_c6b9c9ce",
        "filename": "command/rakp12.cpp",
        "patchSetId": 5
      },
      "lineNbr": 200,
      "author": {
        "id": 1000416
      },
      "writtenOn": "2021-05-26T04:24:11Z",
      "side": 1,
      "message": "Thanks Vernon. Once above patch is merged, we will resume this change.",
      "parentUuid": "200712f8_2e19c9e1",
      "range": {
        "startLine": 200,
        "startChar": 8,
        "endLine": 200,
        "endChar": 50
      },
      "revId": "83f078c049e7b9b6521bccbc9885446e9b35e314",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}